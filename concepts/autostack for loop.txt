static int chainBarStack[4] = {0, 25, 36, 36}; //each float in the array corresponds to the number of cones in stack
void opcontrolStack(){
	static int coneCount = 0;  //each float in the array is a target value for each mechanism
	int cbCurrent = encoderGet(encoderChainB);

	if(joystickGetDigital(2, 7, JOY_RIGHT)){ //reset cone stack variable
		coneCount = 0;
	}
	else if(joystickGetDigital(2, 7, JOY_LEFT)){ //hold this to auto stack
    for(x = 0; x < 3; x++){

      chainBar(min(60, max(-60, PID(cbCurrent, chainBarStack[coneCount], 1, 0.8, 0, 0))));
      while (abs(smartMotorGet(MOTORS_CHAINB)) > 30) { //bring chainbar to mobile goal stack
        cbCurrent = encoderGet(encoderChainB);
        chainBar(min(60, max(-60, PID(cbCurrent, chainBarStack[coneCount], 1, 0.8, 0, 0))));
        if (abs(chainBarStack[coneCount] - cbCurrent) < 20) {
          break;
        }
        printf("chainbar speed, target, current, cone count: %d, %d, %d, %d\n", smartMotorGet(MOTORS_CHAINB), chainBarStack[coneCount], encoderGet(encoderChainB), coneCount);
        delay(1);
      }
      delay(750);
      coneGrabber(90); //dropping cone

      coneCount += 1;

      chainBar(min(60, max(-60, PID(cbCurrent, 190, 1, 0.8, 0, 0))));
      while (abs(smartMotorGet(MOTORS_CHAINB)) > 30) { //bring chainbar to driver load station
        cbCurrent = encoderGet(encoderChainB);
        chainBar(min(60, max(-60, PID(cbCurrent, 190, 1, 0.8, 0, 0))));
        printf("CHAINBAR speed, target, 190, current: %d, %d, %d, %d\n", smartMotorGet(MOTORS_CHAINB), chainBarStack[coneCount], 190, encoderGet(encoderChainB));
        if (abs(190 - cbCurrent) < 20) {
          break;
        }
        delay(1);
      }

      coneGrabber(0);
      delay(20);
      coneGrabber(-90); //this needs speed to pick up cone
      delay(750);
      coneGrabber(0);
      
      if(joystickGetDigital(2, 8, JOY_UP){ //kill autostack button
	    break;
      }
    }

	}
	else { //if autostack isn't running, run normal chainbar/conegrabber opcontrol functions
		opcontrolChainBar();
		opcontrolConeGrabber();
	}

}